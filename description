[--------------- Git ---------------]
1. git init
2. git add . (업데이트 된 파일 추가)
3. git commit -m "msg"
4. git branch -M main
5. git remote (add/set-url) origin (Repo 주소)

첫 실행은 오류가 날 수 있으므로 먼저,
git config --list 확인하고 
기존꺼가 다르면
git config --unset (--global) user.name
git config --unset (--global) user.email
실행 후
git config (--global) user.name
git config (--global) user.email
(맥 환경이면 키체인도 확인)

바로 push 하면 오류가 날 수 있으므로
로컬저장소와 원격저장소 간에 차이가 없게 만들기위해
pull 실행 (여기서도 오류가 나면 git pull origin main --allow-unrelated-histories 실행)
이후 git push -u origin main 실행

--- 수정사항 커밋,푸쉬 ---
1. git add . (업데이트 파일 추가)
2. git commit -m "msg"
3. git push -u origin

[--------------- Git ---------------]





HTTP URI(Uniform Resource Identifier)를 통해 데이터(자원)를 명시하고 
Method(GET, POST, PUT, DELETE)를 통해
해당 데이터를 CRUD(Create, Read, Update, Delete)을 한다.

- REST Method -
GET : 조회
POST : 생성
PUT : 전체 수정
PATCH : 수정
DELETE : 삭제

https://ithub.tistory.com/219 참고
https://backend-intro.vlpt.us/1/ 참고(위보단 이 링크 참고!!)

- Koa 서버구축 -
1. 폴더를 하나 만들고 그 폴더에 npm init (package.json 생성)

2. npm install koa (만약 오류 뜨면 package.json에서 프로젝트명 변경)

3. index.js 작성

4. node index.js 로 실행확인 
    -> package.json 에서 sciprts안에 "start": "node index.js" 입력해서
        npm run start 로 편하게 실행되게 설정

5. 미들웨어 등록하기: 미들웨어는 Koa객체를 담고있는 app이란 변수에 app.use 메소드를 사용하여 미들웨어 등록

6. @koa/router: client에서 요청이 들어왔을때 경로에 알맞은 작업을 처리하기 위해 사용

7. rest api에서 get 파라미터 받아오는 방법
          - 라우트 경로의 값을 받아오는 방법(/users/3): ctx.params
          - 쿼리스트링일 경우 받아오는 방법(/users?id=3): ctx.request.query


- Mongoose를 사용하여 MongoDB 연동 -

여러 문서들이 들어있는곳을 컬렉션이라 하고,
MongoDB 에서는 한 컬렉션에서 다른 스키마를 가지고 있을 수 있음.

1. MongoDB 설치하기 -> brew install mongodb
    (   * 설치 안될때 *
        $ brew tap mongodb/brew
        $ brew install mongodb-community
    )
2. MongoDB 실행하기 -> mkdir db, mongod --dbpath ./db
3. Mongoose 설치하기 -> npm install mongoose
4. DB config 정보 또는 외부에 공개되면 안되는 정보 관리 라이브러리 -> dotenv (npm install dotenv)
    -> .env 파일에 환경변수로 config 정보들을 관리할 수 있음
5. 프로젝트 루트경로에 .env 파일을 만들고 mongoDB의 웹서버의 포트번호와 DB주소 기입
6. index.js 상단에 dotenv 설정 추가 (이후 환경변수에 의해 서버가 실행된 것을 확인)
7. mongoose 를 통해 데이터베이스 연결하기 (mongoDB가 실행되고 있는 상태여야함)
8. mongoose를 사용하여 데이터베이스 스키마 모델링하기 (자바스크립트에서 객체를 생성하여 스키마 구조를 잡음)
    -> mkdir models
9. models폴더에 account.js로 Account 모델 만들기


- rest api 만들기 (CRUD) -

1. koa-bodyparser 설치 후 적용하기
2. ctx.request.body를 사용하여 request body에 들어온 데이터 접근 가능
3. 라우터를 사용해 모듈화하기 (폴더 api 안에 index.js 작성)
4. auth 폴더 안에 index.js, auth_ctrl.js 작성
    -> index.js: route 정보와 연결된 컨트롤러를 정의함
    -> auth.ctrl.js: 실제 로직 구현




( 필요한 라이브러리 설치 (필요한 것만 설치하기)
- @koa/router : Route 설정 -> [ npm install @koa/router ]
- @koa/cors : 특정 아이피 허용 및 차단 (로컬 환경에서 테스트 하기 때문에 설정) -> [ npm install @koa/cors ]
- koa-bodyparser : Request Body 데이터를 받기 -> [ npm install koa-bodyparser --save ]
    -> 익스프레스 환경에서도 req.body에 JSON 데이터를 담아서 보낼 때 undefined 에러가 발생하는 경우가 있었고 이 경우에는 body-parser 모듈을 이용해서 해결했었다. (참조)

- ESLint: 자바스크립트 문법 문제들을 인식해줌 -> [ npm install -g eslint, eslint --init (프로젝트 경로 내에서 실행, 본인이 원하는 설정으로 셋팅) ]
- PM2 & nodemon: 코드 변경 시 서버 자동으로 재시작해줌 (nodemon은 개발 및 테스트에 용이, pm2는 라이브(실제) 서비스에 용이)
    -> npm install pm2 -g, package.json 파일에 "start:dev": "pm2 start src/index.js --watch --no-daemon" 추가

)
